=== Traversing the DOM starting from a selected element

==== Problem

You have a reference to a DOM element and want to locate its ancestor,
sibling, and descendant elements within the DOM structure.

==== Solution

The dart:html API provides methods for DOM traversal based on your current
position in the DOM.

Consider the example below:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <ol>
    <li>Head</li>
    <li>Shoulders</li>
    <li>Knees</li>
    <li>Toes</li>
  </ol>
    
  <body>   
    <script type="application/dart">
      import 'dart:html';

      void main() {
        LIElement knees = query('ol > li:nth-child(3)');       
        print(knees.text); // 'Knees'
      }
    </script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>

--------------------------------------------------------------------------------

Using the top level `query()` function, you obtain a reference to an <li>
element. This is your starting point within the DOM structure.

Use the `nextElementSibling` and `previousElementSibling` properties to locate
locate an element's immediate siblings:

--------------------------------------------------------------------------------
print(knees.nextElementSibling.text);     // 'Toes'
print(knees.previousElementSibling.text); // 'Shoulders'
--------------------------------------------------------------------------------
        
Use the `parent` property to locate an element's immediate ancestor:

--------------------------------------------------------------------------------
print(knees.parent.tagName);              // 'OL'
print(knees.parent.parent.tagName);       // 'BODY'
--------------------------------------------------------------------------------

Use the `children` property to locate an element's immediate descendants:

--------------------------------------------------------------------------------
print(knees.parent.children.length);      // 4
--------------------------------------------------------------------------------

Invoking the `children` property on an element returns a list, and you can
define functions to filter that list:

--------------------------------------------------------------------------------
List<Element> previousSiblings(item) {
  return item.parent.children.takeWhile(
      (element) => element != item).toList();
}

List<Element> nextSiblings(item) {
  Element nextElement = item.nextElementSibling;
  return item.parent.children.skipWhile(
      (element) => element != nextElement).toList();
}
--------------------------------------------------------------------------------

The `knees` element has two previous siblings, and a single next sibling:

--------------------------------------------------------------------------------
List<Element> previousSiblings = previousSiblings(knees);
print(previousSiblings.first.text);    // 'Head'
print(previousSiblings.last.text);     // 'Shoulders'

print(nextSiblings(knees).first.text); // 'Toes'
--------------------------------------------------------------------------------


