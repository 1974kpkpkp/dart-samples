== JSON

JSON (JavaScript Object Notation) is a text-based format for representing
objects and collections. You can use the 'dart:json' library to decode JSON
strings into Dart objects, and encode Dart objects into JSON strings.

To use the examples in this chapter, you need to import the `dart:json`
library. We prefer to declare our import of the libary in a manner that
provides helpful namespacing for top level functions:

--------------------------------------------------------------------------------
import 'dart:json' as json;

void main() {
  json.stringify( ... );
  json.parse( ... );
  ...
}
--------------------------------------------------------------------------------

You can read the API documentation for the dart:json library at
http://api.dartlang.org/docs/releases/latest/dart_json.html.


=== Encoding JSON

==== Problem

You want to convert a Dart object into JSON.

==== Solution

Use the `stringify()` function to encode a Dart object into a JSON-formatted
string.

The following Dart objects are automatically encoded into JSON by
`stringify()`:

* int
* double
* String
* bool
* null
* List
* Map

--------------------------------------------------------------------------------
import 'dart:json' as json;

void main() {
  var person = {'name': 'joe', 
                'born':  2002,
                'into': {'films' : ['crime', 'noir']},
                'aliases': []};
  
  json.stringify(person);
  // '{"name":"joe","born":2002,"into":{"films":["crime","noir"]},"aliases":[]}'
}
--------------------------------------------------------------------------------

Note that `stringify()` encodes List and Map objects recursively.

If an object of a type not in the list above is passed to `stringify()` as an
argument, `stringify()` calls that object's `toJson()` method:

--------------------------------------------------------------------------------
import 'dart:json' as json;

class Person {
  String name;
  num age;
  
  Person(this.name, this.age);
  dynamic toJson() => {"name": name, "age": age};
}

void main() {
  var person = new Person('john', 32);
  json.stringify(person); // '"{\"name\":\"john\",\"age\":32}"'
}
--------------------------------------------------------------------------------

If the `toJson()` method is not defined on an object that `stringify()`
doesn't know how to handle, `stringify()` throws an exception:

--------------------------------------------------------------------------------
import 'dart:json' as json;

class Book {
  String title;
  num numPages;
 
  Book(this.title, this.numPages);
}

void main() {
  var book = new Book('War and Peace', 1089);
  json.stringify(book); // json.JsonUnsupportedObjectError
}
--------------------------------------------------------------------------------

It is possible that `stringify()` calls `toJson()` on several objects in your
code, and throws an exception if any one of those objects lacks a `toJson()`.
Use `JsonUnsupportedObjectError`'s `cause` property to see which
object triggered the exception:

--------------------------------------------------------------------------------
void main() {
  var person = new Person('john', 32);              // toJson() defined.
  var book = new Book('War and Peace', 1089);       // toJson() not defined.
  var object = {'person': person, 'reads' : book};

  try {
    json.stringify(object);
  } catch(e) {
    print(e.cause.toString());
    // "Class 'Book' has no instance method 'toJson'..."
  }
}
--------------------------------------------------------------------------------

=== Decoding JSON

==== Problem

You want to convert a JSON string into a Dart object.

==== Solution

Use `parse()` to decode a JSON-encoded string into a Dart object:

--------------------------------------------------------------------------------
import 'dart:json' as json;

void main() {
  var jsonPerson = '{"name" : "joe", "date" : [2013, 3, 10]}';
    
  var person = json.parse(jsonPerson);
  
  person['name'];         // 'joe'
  person['date'];         // [2013, 3, 10]
  person['date'] is List; // true
}
--------------------------------------------------------------------------------

Sometimes you want to transform the data parsed by `parse`. For
example, you may prefer to express a date field as a DateTime object, and not
as a list of numbers representing the year, month and day. Specify a 'reviver'
function as a second argument to `parse`. 

This function is called once for each object or list property parsed, and the 
return value of the reviver function is used instead of the parsed value:

--------------------------------------------------------------------------------
import 'dart:json' as json;

void main() {
  var jsonPerson = '{"name" : "joe", "date" : [2013, 10, 3]}';

  var person = json.parse(jsonPerson, (key, value) {
    if (key == "date") {
      return new DateTime(value[0], value[1], value[2]);
    }
    return value;
  });

  person['name'];             // 'joe'
  person['date'] is DateTime; // true
}
--------------------------------------------------------------------------------




