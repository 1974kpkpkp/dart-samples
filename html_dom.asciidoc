== Working with the DOM

=== Using CSS selectors to find DOM elements

==== Problem

You want to find DOM elements on a web page.

==== Solution

Use the top-level `query()` and `queryAll()` functions provided by the
`dart:html` library. Both functions take CSS selectors as arguments. The
`query()` function returns the first matching element, and the `queryAll()`
function returns all matching elements.

==== Example

Here are a few examples of the using `query()` and `queryAll()` with CSS
selectors to find DOM elements:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>
    <h1>Breakfast</h1>
    <ul>
      <li id='first' class='must-have'>Milk</li>
      <li class='must-have'>Cereal
        <ul>
          <li>Bran Flakes</li>
          <li><a href='https://en.wikipedia.org/wiki/Nut_(fruit)'>Nuts</a></li>
        </ul>
      </li>
      <li>Juice</li>
    </ul>

    <script type="application/dart">
      import 'dart:html';

      void main() {

        // Find by ID.
        Element element = query('#first');
        print(element.id);                 // 'first'
        print(element.text);               // 'Milk'

        // Find by class.
        List<Element> elements = queryAll('.must-have');
        print(elements.length);            // 2

        // Find by ID or class.
        elements = queryAll('#first, .must-have');
        print(elements.length);            // 2

        // Find by tag.
        elements = queryAll('li');
        print(elements.length);            // 5

        // Use hierarchical selectors.
        elements = queryAll('li > ul > li');
        print(elements.first.text);        // 'Bran Flakes'

        // Use pseudo-elements.
        element = query('li:nth-child(1)');
        print(element.text);               // 'Milk'

        // Find by attribute.
        elements = queryAll('[href *= Nut]');
        print(elements.length);            // 1

      }
    </script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------

For a comprehensive list of selectors that you can use for querying, see
http://www.w3.org/TR/css3-selectors/[The CSS Selector Specification guide].

Calling `queryAll()` returns a list of DOM elements:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>
    <ol>
      <li>Google</li>
      <li>StackOverflow</li>
      <li>Reddit</li>
      <li>Github</li>
    </ol>

    <script type="application/dart">
      import 'dart:html';

      void main() {
        List<Element> elements = queryAll('li');
      }
    </script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>

--------------------------------------------------------------------------------

Use the `[]` operator to access individual elements. You can also use the
`first` and `last` getters:

--------------------------------------------------------------------------------
print(elements[2].text);    // 'Reddit'
print(elements.first.text); // 'Google'
print(elements.last.text);  // 'Github'
--------------------------------------------------------------------------------

You can iterate over the list, map list elements to a new list, and filter list
contents:

--------------------------------------------------------------------------------
for (var element in elements) {
   doSomethingWith(element);
}

Iterable sites = elements.map((site) => site.text);
print(sites.join(', ')); // "Google, StackOverflow, Reddit, Github"

sites = elements.where((site) => site.text.length != 6);
print(sites.first.text); // "StackOverflow"
--------------------------------------------------------------------------------

You can slice the list to obtain a sublist:

--------------------------------------------------------------------------------
var sublist = elements.sublist(1, 3); // Get the elements at positions 1 and 2.
print(sublist.first.text);            // 'StackOverflow'
print(sublist.last.text);             // 'Reddit'
--------------------------------------------------------------------------------

Since the list returned by `queryAll()` is read only, you cannot add, modify,
or remove list elements. Attempting to change the list in any way generates an
error:

--------------------------------------------------------------------------------
elements.length = 2; // Error message: 'Cannot resize immutable List.'
--------------------------------------------------------------------------------

Other recipes in this chapter show how you can create elements and insert them
into the DOM, and how to modify existing DOM elements.


=== Using CSS selectors within a limited scope

==== Problem

You want to find elements that are contained by a particular element.

==== Solution

Call the `query()` or `queryAll()` methods on a DOM element. Invoking one of
these methods on an element restricts the scope of the query to that
element's descendants:

--------------------------------------------------------------------------------
containerElement.query(cssSelector);
containerElement.queryAll(cssSelector);
--------------------------------------------------------------------------------

==== Examples

Consider the following table of user records:

--------------------------------------------------------------------------------
<table>
  <tr><td>Jose</td><td class='status'>Accepted</td></tr>
  <tr><td>Marie</td><td class='status'>Accepted</td></tr>
  <tr><td>Kwame</td><td class='status'>Accepted</td></tr>
  <tr><td>Rohan</td><td class='status'>Accepted</td></tr>
</table>
--------------------------------------------------------------------------------

The following code attaches an event handler to each <tr>. When a <tr> is
clicked, the text within the matching descendant <td> toggles:

--------------------------------------------------------------------------------
queryAll('tr').forEach((element) {
  element.onClick.listen((event) {
    var record = event.currentTarget.query('.status');
    record.innerHtml = record.innerHtml == 'Accepted' ? 'Declined' : 'Accepted';
  });
});
--------------------------------------------------------------------------------

Because the query is scoped to the just-clicked row, cells with the 'status'
class in other rows are not affected.

Note the use of `queryAll()` as a top-level function in the code above. Used
in this manner, `queryAll()` is scoped to the entire document.


=== Traversing the DOM starting from a particular element

==== Problem

You have a reference to a DOM element and want to locate its ancestor,
sibling, and descendant elements within the DOM structure.

==== Solution

The dart:html API provides methods for DOM traversal based on your current
position in the DOM.

Consider the example below:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <ol>
    <li>Head</li>
    <li>Shoulders</li>
    <li>Knees</li>
    <li>Toes</li>
  </ol>

  <body>
    <script type="application/dart">
      import 'dart:html';

      void main() {
        LIElement knees = query('ol > li:nth-child(3)');
        print(knees.text); // 'Knees'
      }
    </script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>

--------------------------------------------------------------------------------

Using the top level `query()` function, you obtain a reference to an <li>
element. This is your starting point within the DOM structure.

Use the `nextElementSibling` and `previousElementSibling` properties to locate
an element's immediate siblings:

--------------------------------------------------------------------------------
print(knees.nextElementSibling.text);     // 'Toes'
print(knees.previousElementSibling.text); // 'Shoulders'
--------------------------------------------------------------------------------

Use the `parent` property to locate an element's immediate ancestor:

--------------------------------------------------------------------------------
print(knees.parent.tagName);              // 'OL'
print(knees.parent.parent.tagName);       // 'BODY'
--------------------------------------------------------------------------------

Use the `children` property to locate an element's immediate descendants:

--------------------------------------------------------------------------------
print(knees.parent.children.length);      // 4
--------------------------------------------------------------------------------

Invoking the `children` property on an element returns a list, and you can
define functions to filter that list:

--------------------------------------------------------------------------------
List<Element> previousSiblings(item) {
  return item.parent.children.takeWhile(
      (element) => element != item).toList();
}

List<Element> nextSiblings(item) {
  Element nextElement = item.nextElementSibling;
  return item.parent.children.skipWhile(
      (element) => element != nextElement).toList();
}
--------------------------------------------------------------------------------

The `knees` element has two previous siblings, and a single next sibling:

--------------------------------------------------------------------------------
List<Element> previousSiblings = previousSiblings(knees);
print(previousSiblings.first.text);    // 'Head'
print(previousSiblings.last.text);     // 'Shoulders'

print(nextSiblings(knees).first.text); // 'Toes'
--------------------------------------------------------------------------------


=== Creating DOM elements

==== Problem

You want to create new DOM elements.

==== Solution

The dart:html library provides several ways to create new DOM elements.

You can use constructors provided by specialized element classes:

--------------------------------------------------------------------------------
var item = new LIElement();
--------------------------------------------------------------------------------

These classes inherit from Element. Here are a few examples of specialized
properties that these classes provide:

--------------------------------------------------------------------------------
var anchor = new AnchorElement();
anchor.href = 'http://dartlang.org';
print(anchor.outerHtml); // '<a href="http://dartlang.org"></a>'

var label = new LabelElement();
label.htmlFor = 'color';
label.text = 'Color';
print(label.outerHtml); // '<label for="color">Color</label>'

var form = new FormElement();
form.method = 'PUT';
print(form.outerHtml); // '<form method="PUT"></form>'
--------------------------------------------------------------------------------

You can also use constructors provided by the Element class.

Use the `Element.tag()` constructor to create an element with a specified tag:

--------------------------------------------------------------------------------
LIElement item = new Element.tag('li');
print(item.tagName); // 'LI'
--------------------------------------------------------------------------------

You can then assign content to the element using the element's text property:

--------------------------------------------------------------------------------
item.text = 'learn Dart';
print(item.outerHtml); //  '<li>learn Dart</li>'
--------------------------------------------------------------------------------

An invalid HTML tag passed to `Element.tag()` creates an UnknownElement object:

--------------------------------------------------------------------------------
var newElement = new Element.tag('bogusTag');
print(newElement is UnknownElement); // true
--------------------------------------------------------------------------------

You can use the 'isTagSupported' static method provided by the Element class
to test whether a tag is valid:

--------------------------------------------------------------------------------
print(Element.isTagSupported('bogusTag')); // false
--------------------------------------------------------------------------------

Another way of creating elements is through the use of the `Element.html()`
constructor. This constuctor takes a String argument representing a valid HTML
fragment:

--------------------------------------------------------------------------------
DivElement div = new Element.html('<div>I love Strawberries.</div>');
--------------------------------------------------------------------------------

Note that creating an element does not insert it into the DOM. Other recipes
in this chapter discuss different ways in which you can add elements to the DOM.


=== Inserting child elements inside an existing DOM element

==== Problem

You want to insert one or more elements inside an existing DOM element.

==== Solution

Get the list of the DOM element's children, and add new child elements to that
list.

Consider this sparse web page with an empty <ul>. You want to use Dart code to
dynamically add <li> elements to the <ul>:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>
    <ul></ul>

    <script type="application/dart" src='main.dart'></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------

In the corresponding Dart file, begin by getting a reference to the parent
element:

--------------------------------------------------------------------------------
import 'dart:html';

void main() {
  var ul = query('ul');
  // Code for inserting elements goes here.
}
--------------------------------------------------------------------------------

Use `add()` to append a new element to the parent's children:

--------------------------------------------------------------------------------
var li = new LIElement();
li.text = 'One banana';
ul.children.add(li);

print(ul.children.last.outerHtml); '<li>One banana</li>'
--------------------------------------------------------------------------------

The code for creating a new <li> and adding it to the <ul> can be more
succinctly written using the cascade operator, and we will use this synax for
subsequent examples:

--------------------------------------------------------------------------------
items.add(new LIElement()..text = 'Three banana');
--------------------------------------------------------------------------------

Use `addAll()` to add several elements to the list:

--------------------------------------------------------------------------------
List<LIElement> items = [];
items.add(new LIElement()..text = 'Three banana');
items.add(new LIElement()..text = 'Four banana');
ul.children.addAll(items);
--------------------------------------------------------------------------------

This is what the list looks like:

--------------------------------------------------------------------------------
One banana
Three banana
Four banana
--------------------------------------------------------------------------------

Looks like we skipped an item. Use `insert()` to place the missing item in the
list:

--------------------------------------------------------------------------------
ul.children.insert(1, new LIElement()..text = 'Two banana');
--------------------------------------------------------------------------------

This adds the new <li>  after the second item. The list now looks like this:

--------------------------------------------------------------------------------
One banana
Two banana
Three banana
Four banana
--------------------------------------------------------------------------------

You can use `insert()` to prepend to a list:

--------------------------------------------------------------------------------
ul.children.insert(0, new LIElement()..text = 'Zero banana');
print(ul.children.first.outerHtml == '<li>Zero banana</li>');
--------------------------------------------------------------------------------

The Element class defines a couple of helpful methods that provide additional
ways of adding child elements to a parent element.

Use `append()` to add a single element to a parent:

--------------------------------------------------------------------------------
ul.append(new LIElement()..text = 'Five banana');
--------------------------------------------------------------------------------

Or, you can use the `appendHtml()` method. This method parses the String
argument passed to it as HTML and adds the resulting node as the last child of
the parent:

--------------------------------------------------------------------------------
ul.appendHtml('<li>Six banana</li>');
--------------------------------------------------------------------------------

Here is the final version of the list:

--------------------------------------------------------------------------------
Zero banana
One banana
Two banana
Three banana
Four banana
Five banana
Six banana
--------------------------------------------------------------------------------


=== Inserting elements adjacent to an existing DOM element

==== Problem

You want to insert an element before or after another element.

==== Solution

Use an element's `insertAdjacentElement()` method to insert another element
immediately before or immediately after it. Or, use the `insertBefore()` method.
Examples of both are shown below.

==== Examples

Consider this HTML file. You want to insert two new <li> elements into the <ul>,
one before the <li> with the 'target' ID, and one after it:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>
    <ul>
      <li>First item</li>
      <li id='target'>Target item</li>
      <li>Last item</li>
    </ul>

    <script type='application/dart' src='main.dart'></script>

    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------

In the accompanying Dart file, get a reference to the target <li>.  Then,
invoke the `insertAdjacentElement()` method on that <li> to insert new elements
next to it:

--------------------------------------------------------------------------------
import 'dart:html';

void main() {
  var targetItem = query('#target');

  var li = new LIElement();
  li.text = 'Added before target';
  targetItem.insertAdjacentElement('beforeBegin', li);

  li = new LIElement();
  li.text = 'Added after target';
  targetItem.insertAdjacentElement('afterEnd', li);
}

--------------------------------------------------------------------------------


The first argument to `insertAdjacentElement()` indicates where the new
element is inserted, with 'beforeBegin' inserting it before the target element

The first argument to `insertAdjacentElement()` indicates where the new
element is inserted. If it is 'beforeBegin', the new element is inserted
immediately before the target element. If it is 'afterEnd', the new element is
inserted immediately after the target element.

The list looks like this after the new elements have been inserted:

--------------------------------------------------------------------------------
First item
Added before target
Target item
Added after target
Last item
--------------------------------------------------------------------------------

You can also use the `insertBefore()` method to insert an element into the
DOM. Call `insertBefore()` on the target element's parent node:

--------------------------------------------------------------------------------
import 'dart:html';

void main() {
  var targetItem = query('#target');

  var li = new LIElement();
  li.text = 'Added before target';
  targetItem.parent.insertBefore(li, targetItem);

  li = new LIElement();
  li.text = 'Added after target';
  // Insert after the target element.
  targetItem.parent.insertBefore(li, targetItem.nextElementSibling);
}
--------------------------------------------------------------------------------


=== Cloning DOM elements

==== Problem

You want to duplicate a DOM element.

==== Solution

Call the `clone()` method on the element.

Assume you have the following HTML, and want to clone the <ul>:

--------------------------------------------------------------------------------
<ul>
  <li>Sam</li>
  <li>Green Eggs</li>
  <li>Ham</li>
</ul>
--------------------------------------------------------------------------------

First, obtain a reference to the original element:

--------------------------------------------------------------------------------
UListElement ul = query('ul');
--------------------------------------------------------------------------------

Then, call `clone()` with a boolean argument. This argument determines whether
you create a deep or a shallow copy.

If the argument to `clone()` is `true`, a deep copy is created, and the entire
subtree of the original node is cloned:

--------------------------------------------------------------------------------
UListElement deepCopy = ul.clone(true);
print(deepCopy.children.length); // 3
--------------------------------------------------------------------------------

If the argument to `clone()` is `false`, a shallow copy is created, and the
original element's child nodes are not copied:

--------------------------------------------------------------------------------
UListElement shallowCopy = ul.clone(false);
print(shallowCopy.children.length); // 0
--------------------------------------------------------------------------------

Cloning a node copies all of the node's attributes, as well as the values of
those attributes.

Assume a page contains the following HTML:

--------------------------------------------------------------------------------
<input type="text" name="username" maxlength="10">
--------------------------------------------------------------------------------

The clone of the <input> element contains the same attributes as the original:

--------------------------------------------------------------------------------
import 'dart:html';

void main() {
  var original = query('input');
  var clone = original.clone(true);

  print(original.attributes['type'] == original.attributes['type']); // true
  print(original.attributes['name'] == original.attributes['name']); // true
  print(original.attributes['size'] == original.attributes['size']); // true
}
--------------------------------------------------------------------------------


==== Example

We want to display Google Doodle logos on a page (www.google.com/doodles), but
don't want to load up all the images when the page loads. We provide a link that
the user can click to see the logos.

We use a <template> element to store the barebones structure for displaying each
logo and the accompanying caption. The <template> element allows us to declare
fragments of markup. These fragments are not rendered when the page loads, but
they can be activated at runtime.

The <template> element is new and not supported by every modern browser. For
an excellent introduction to this new element, see
[HTML's New Template Tag](http://www.html5rocks.com/en/tutorials/webcomponents/template/).

The <template> in the HTML below contains <img>, <div> and <hr> tags. The <img>
tag has no src and alt properties, and the <div> element contains no text. These
tags are placeholders.

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>
    <template id='myTemplate'>
      <img width='150px'>
      <div class='caption'></div>
      <hr>
    </template>

    <div><a href=''>Click to see Google Doodles</a></div>

    <script type='application/dart' src='main.dart'></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>

--------------------------------------------------------------------------------

Once the user clicks the link to see the logos, we fill in the missing fields
using hard-coded data. Then, we clone the template contents, and we insert them
into the document:

--------------------------------------------------------------------------------
import 'dart:html';

void main() {

  var data = [
    {'src': 'http://www.google.com/logos/2013/parents_day_2013-1508005-hp.jpg',
      'alt': "Parent's Day",
      'caption': "Parent's Day"},
    {'src': 'http://www.google.com/logos/2013/new_years_day_2013-983008-hp.jpg',
     'alt': "New Year's Day",
     'caption': "New Year's Day"},
    {'src': 'http://www.google.com/logos/2013/zamboni-1005006-hp.jpg',
     'alt': 'Zamboni',
     'caption': 'Zamboni'}
  ];

  AnchorElement link = query('a');

  link.onClick.listen((event) {
    event.preventDefault();

    var content = document.query('#myTemplate').content;
    ImageElement img = content.query('img');
    DivElement div = content.query('div');

    for (Map item in data) {
      img.src = item['src'];
      img.alt = item['alt'];
      div.text = item['caption'];

      document.body.append(content.clone(true));
    }
    event.target.remove();
  });
}
--------------------------------------------------------------------------------

We get the template contents using the template element's `content` property.

--------------------------------------------------------------------------------
var content = document.query('#myTemplate').content;
--------------------------------------------------------------------------------

We get references to the <img> and <div> elements using scoped queries:

--------------------------------------------------------------------------------
ImageElement img = content.query('img');
DivElement div = content.query('div');
--------------------------------------------------------------------------------

Cloning the template contents activates the <template> element's inert HTML, and
inserting it into the DOM makes the logos visible to the user:

--------------------------------------------------------------------------------
document.body.append(content.clone(true));
--------------------------------------------------------------------------------


=== Replacing DOM elements

==== Problem

You want to replace one or more DOM elements with other elements.

==== Solution

Call the `replaceWith()` method on a DOM element and pass to it the new
element as an argument.

==== Example

The following example allows the user to edit a snippet of text. The text is
displayed within a <span> element. A text <input> replaces the <span> when the
user wants to edit the text. When the user is done editing, the <span> replaces
the <input>:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>
    <span>You can edit this.&nbsp;</span><a href='#'>Edit</a>

    <script type="application/dart">

      import 'dart:html';

      void main() {

        var span = query('span');
        var link = query('a');

        // Create input but don't insert into DOM.
        var input = new Element.html(
            "<input type='text' value='${span.innerHtml}' />");

        bool editing = false;

        // Add event-listener to replace a span with an input, and vice-versa.
        link.onClick.listen((event) {
          editing = !editing;
          if (editing) {
            span.replaceWith(input);
            link.innerHtml = 'Done';
          } else {
            input.replaceWith(span);
            link.innerHtml = 'Edit';
          }
          event.preventDefault();
        });
      }
    </script>

    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------


=== Removing an element from the DOM

==== Problem

You want to find an element and remove it from the DOM structure.

==== Solution

Call the `remove()` method on the element. Doing so removes it from the DOM.

==== Example

The following example shows a list of exotic fruits, some of which are out of
stock.  The application allows the user to click a link to stop displaying the out
of stock items. Clicking the link triggers a callback that removes the items from
the DOM. Here is the HTML file:

--------------------------------------------------------------------------------
<!DOCTYPE html>
<head>
  <style> .out-of-stock {color: #aaa}; </style>
</head>
<html>
  <body>
    <ul>
      <li>Rambutan</li>
      <li>Jackfruit</li>
      <li class='out-of-stock'>Passion Fruit</li>
      <li>Lychee</li>
      <li class='out-of-stock'>Kumquat</li>
    </ul>

    <p><a href='#'>Show only in-stock</a></p>

    <script type="application/dart" src='main.dart'></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------

And here is the Dart code that handles the element removal:

--------------------------------------------------------------------------------
import 'dart:html';

void main() {

  query('a').onClick.listen((event) {

    // Find all out of stock items and remove them from the DOM.
    queryAll('.out-of-stock').forEach((item) {
      item.remove();
    });

    event.preventDefault();

    // Remove the link from the DOM.
    event.target.remove();
  });
}
--------------------------------------------------------------------------------

==== Discussion

Using `remove()` works well if you have a reference to the DOM element you
want to remove. But sometimes, you have a reference to the element's
parent, not to the element itself. For example, you may want to remove an <li>,
but you only have a reference to the <ul> or <ol> that contains the <li>.

In such cases, get a list of the parent element's children. Removing elements
from this list removes them from the DOM.

Use `removeAt()` to remove a child by its index position:

--------------------------------------------------------------------------------
element.children.removeAt(1); // Removes the second child.
--------------------------------------------------------------------------------

Remove the last child using `removeLast()`:

--------------------------------------------------------------------------------
element.children.removeLast();
--------------------------------------------------------------------------------

You can query the collection of children and remove a matching child using
`remove()`. The code below finds the first child with the class `largest`,
and removes it from the DOM:

--------------------------------------------------------------------------------
element.children.remove(element.query('.largest'));
--------------------------------------------------------------------------------

You can remove all of an element's children using the `clear()` method:

--------------------------------------------------------------------------------
element.children.clear();
--------------------------------------------------------------------------------


=== Getting and setting DOM element attributes

==== Problem

You have a DOM element and want to get or set the value of its attributes.

==== Solution

Most attributes have a corresponding property that you can use to get or set
the attribute value. You can also use the an element's `attributes` map.  In
general, using properties is more Darty, since properties allow tools to check
the attribute name and type.

==== Examples

Consider the following element:

--------------------------------------------------------------------------------
<input type='text' name='fname' id='fname' data-purpose='informational' />
--------------------------------------------------------------------------------

The Element class defines several properties, such as `id` and `classes`, that
correspond to element attributes. Here are some examples:

--------------------------------------------------------------------------------
print(element.id);                 // 'fname'

element.classes.add('first-name');
print(element.classes.first);      // 'first-name'
--------------------------------------------------------------------------------

Subclasses of Element define additional properties, such as the href property of
AnchorElement, or the size and maxLength properties of InputElement:

--------------------------------------------------------------------------------
element.size = 30;
element.maxLength = 10;
--------------------------------------------------------------------------------

When an element attribute does not have a corresponding property, or when
using a property is not convenient, you can use an element's attributes map:

--------------------------------------------------------------------------------
print(element.attributes['id']);                   // 'fname'
print(element.attributes['name']);                 // 'fname'
--------------------------------------------------------------------------------

Use the attributes map to access an element's data-* attributes:

--------------------------------------------------------------------------------
print(element.attributes['data-purpose']); // 'informational'
--------------------------------------------------------------------------------

If you want to get or set _only_ the data-* attributes, use the `dataset`
property:

--------------------------------------------------------------------------------
print(element.dataset.length);     // 1

// The key is 'purpose', not 'data-purpose'.
print(element.dataset.keys.first); // 'purpose'
print(element.dataset['purpose']); // 'informational'

element.dataset['purpose'] = 'biographical';
print(element.dataset['purpose']); // 'biographical'
--------------------------------------------------------------------------------

Both the `attributes` and the `dataset` properties return Map objects. Any
modifications to an element's attributes map automatically apply to the
element:

--------------------------------------------------------------------------------
// Change attribute value.
element.attributes['id'] = 'first-name';
print(element.attributes['id']);        // 'first-name'

// Create a new attribute.
element.attributes['maxLength'] = 10;
print(element.attributes['maxLength']); // '30'

// Remove an attribute.
element.attributes.remove('id');
print(element.attributes['id']);       // null
--------------------------------------------------------------------------------


=== Getting and setting element style properties

==== Problem

You want to get and set an element's CSS style properties.

==== Solution

You have three options:

* To get an element's style properties, use the `getComputedStyle()` method.

* To get or set the classes associated with an element, use the `classes`
field.

* To assign style properties directly to an element, use the `style` field.

==== Examples

The examples below assume the following HTML:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <head>
    <title>manipulating_styles</title>
    <link rel='stylesheet' type='text/css' href='main.css'>
  </head>
  <body>
    <div class='bold'>Dart Cookbook</div>

    <script type='application/dart' src='main.dart'></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------

Here are the associated style declarations:

--------------------------------------------------------------------------------
// main.css

body {font-family: sans-serif;}
div:after {content: ' rocks!';}
.bold {font-weight: bold;}
.underlined {text-decoration: underline;}
--------------------------------------------------------------------------------

===== Getting an element's CSS styles

Use the `getComputedStyle()` method to get a collection of all CSS styles
applied to an element:

--------------------------------------------------------------------------------
// main.dart

import 'dart:html';

void main() {
  DivElement element = query('div');

  print(element.getComputedStyle().fontFamily); // 'sans-serif'

  // Inherited style.
  print(element.getComputedStyle().fontWeight); // 'bold'
}
--------------------------------------------------------------------------------

The `getComputedStyle()` method gets the style information for pseudo-elements.
Just pass in the pseudo-element as an argument:

--------------------------------------------------------------------------------
print(element.getComputedStyle(':after').content); // "' rocks!'"
--------------------------------------------------------------------------------

===== Accessing the classes associated with an element

Use the `classes` field to get a set of an element's CSS classes:

--------------------------------------------------------------------------------
print(element.classes.first); // 'bold'
--------------------------------------------------------------------------------

You can associate a new class with an element. Doing this applies the class
styles to the element:

--------------------------------------------------------------------------------
element.classes.add('underlined');
print(element.classes.contains('underlined'));    // true
print(element.getComputedStyle().textDecoration); // 'underline'
--------------------------------------------------------------------------------

You can remove a class associated with an element. Doing this removes the
class styles from the element:

--------------------------------------------------------------------------------
element.classes.remove('underlined');
print(element.getComputedStyle().textDecoration); // 'none'
--------------------------------------------------------------------------------

You can use the class list's `toggle()` method to toggle a class:

--------------------------------------------------------------------------------
element.classes.toggle('underlined');
print(element.classes.contains('underlined')); // true

element.classes.toggle('underlined');
print(element.classes.contains('underlined')); // false
--------------------------------------------------------------------------------

===== Directly applying a style property

While using classes is a common way of associating an element with a set of
styles, you can also attach a style property directly to the element:

--------------------------------------------------------------------------------
element.style.color = 'rgb(120, 120, 120)';
element.style.border = '1px solid rgb(0, 0, 0)';
--------------------------------------------------------------------------------

It is idiomatic Dart to write the above code using the cascade operator (..):

--------------------------------------------------------------------------------
element.style
  ..color =  'rgb(120, 120, 120)';
  ..border = '1px solid rgb(0, 0, 0)';
--------------------------------------------------------------------------------


