=== Cloning DOM elements

=== Problem

You want to duplicate a DOM element.

=== Solution

Call the `clone()` method on a DOM element.

Assume that you have the following HTML, and you want to clone the <ul>:

--------------------------------------------------------------------------------
<ul>
  <li>Sam</li>
  <li>Green Eggs</li>
  <li>Ham</li>
</ul>
--------------------------------------------------------------------------------

First, obtain a reference to that element:

--------------------------------------------------------------------------------
UListElement ul = query('ul');
--------------------------------------------------------------------------------

Then call `clone()` with a boolean argument that indicates whether you want to
make a deep or a shallow copy. 

If the argument to `clone()` is `true`, a deep copy is created, and the entire
subtree of the original node is cloned:

--------------------------------------------------------------------------------
UListElement deepCopy = ul.clone(true);
print(deepCopy.children.length); // 3
--------------------------------------------------------------------------------

If the argument to `clone()` is `false`, a shallow copy is created, and the
original element's child nodes are not copied:

--------------------------------------------------------------------------------
UListElement shallowCopy = ul.clone(false);
print(shallowCopy.children.length); // 0
--------------------------------------------------------------------------------

Cloning a node copies all of the node's attributes, as well as the values of 
those attributes.

Assume a page contains the following HTML:

--------------------------------------------------------------------------------
<input type="text" name="username" maxlength="10">
--------------------------------------------------------------------------------

The clone of the <input> element contains the same attributes as the original:

--------------------------------------------------------------------------------
import 'dart:html';

void main() {
  var original = query('input');
  var clone = original.clone(true);

  print(original.attributes['type'] == original.attributes['type']); // true
  print(original.attributes['name'] == original.attributes['name']); // true
  print(original.attributes['size'] == original.attributes['size']); // true
}
--------------------------------------------------------------------------------


==== Example

We want to display Google logos on a page, but don't want to load up all the
images when the page loads. We provide a link that the user can click to see the 
logos.

We use a <template> element to store the barebones structure for displaying each
logo and an accompanying caption. The <template> element allows us to declare
fragments of markup. These fragments are not rendered when the page loads, but
can be activated at runtime.

The <template> in the HTML below contains <img>, <div> and <hr> tags. The <img>
tag has no src and alt properties, and the <div> element contains no text. These
tags are placeholders:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>   
    <template id='myTemplate'>
      <img width='150px'>
      <div class='caption'></div>
      <hr>
    </template> 
    
    <div><a href=''>Click to see Google Doodles</a></div>
      
    <script type='application/dart' src='main.dart'></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>

--------------------------------------------------------------------------------

Once the user clicks the link to see the logos, we fill in the missing fields
using hard-coded data. Then, we clone the template contents and insert them
into the document:

--------------------------------------------------------------------------------
import 'dart:html';

void main() {
  
  var data = [
    {'src': 'http://www.google.com/logos/2013/parents_day_2013-1508005-hp.jpg', 
      'alt': "Parent's Day",
      'caption': "Parent's Day"},
    {'src': 'http://www.google.com/logos/2013/new_years_day_2013-983008-hp.jpg',
     'alt': "New Year's Day",
     'caption': "New Year's Day"},
    {'src': 'http://www.google.com/logos/2013/zamboni-1005006-hp.jpg',
     'alt': 'Zamboni',
     'caption': 'Zamboni'}
  ];

  AnchorElement link = query('a');
  
  link.onClick.listen((event) { 
    event.preventDefault();

    // Get the <template> contents.
    var content = document.query('#myTemplate').content;
    ImageElement img = content.query('img');
    DivElement div = content.query('div');

    for (Map item in data) {
      // Add data to tags.
      img.src = item['src'];
      img.alt = item['alt'];
      div.text = item['caption'];

      // Clone the content and append to the page.
      document.body.append(content.clone(true));
    }
    event.target.remove();
  });
}

--------------------------------------------------------------------------------

The <template> element is new and not supported by every modern browser. For
an excellent introduction to the <template> element, and the pros and cons of
cloning and using template elements, see
[HTML's New Template Tag](http://www.html5rocks.com/en/tutorials/webcomponents/template/)

Once the template is activated, and a clone inserted into the DOM, the element
content becomes visible to the user.

