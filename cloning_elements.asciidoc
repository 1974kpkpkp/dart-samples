=== Cloning DOM elements

=== Problem

You want to clone DOM elements.

=== Solution

Call the `clone()` method on a DOM element:

--------------------------------------------------------------------------------
<ul>
  <li>Sam</li>
  <li>Green Eggs</li>
  <li>Ham</li>
</ul>
--------------------------------------------------------------------------------

First, obtain a reference to the element you want to clone:

--------------------------------------------------------------------------------
UListElement ul = query('ul');
--------------------------------------------------------------------------------

Then call `clone()` with a boolean argument that indicates whether you want to
make a deep or a shallow copy. 

If the argument to `clone()` is `true`, a deep copy is created, and the entire
subtree of the original node is cloned:

--------------------------------------------------------------------------------
UListElement deepCopy = ul.clone(true);
print(deepCopy.children.length); == 3
--------------------------------------------------------------------------------

If the argument to `clone()` is `false`, a shallow copy is created, and the
original element's child nodes are not copied:

--------------------------------------------------------------------------------
UListElement shallowCopy = ul.clone(false);
print(shallowCopy.children.length); // 0
--------------------------------------------------------------------------------

Cloning a node copies all of the node's attributes, as well as the value of 
those attributes (the code below assumes that the HTML contains a <p>
element):

--------------------------------------------------------------------------------
ParagraphElement para = query('p');
var paraClone = para.clone(true);

print(para.attributes['class'] == paraClone.attributes['class']); // true
--------------------------------------------------------------------------------

The node returned by calling `clone()` is not part of the DOM until it is added
to another DOM node.

==== Example

The example shown below demonstrates how a <template> element can be cloned
and added to the document.

The <template> element allows you to declare fragments of markup. These
fragments are not rendered when the page loads, but can be activated at runtime.

Here is an example of a <template> element:

--------------------------------------------------------------------------------
<template id='myTemplate'>
  <img src='' alt=''>
  <div class='caption'></div>
</template>
--------------------------------------------------------------------------------

We assign no values to the `src` and `alt` attributes of the <img> element, and 
assign no text to the <div> containing the image caption. We fill those
fields in later at runtime. Once that is done, we clone the template contents
and insert them into the document.

First, query for the <template> element and get its content:

--------------------------------------------------------------------------------
var content = query('#myTemplate').content;
--------------------------------------------------------------------------------

Then, modify the template contents:

--------------------------------------------------------------------------------
ImageElement img = content.query('img');
img.src = 'https://www.google.com/images/srpr/logo4w.png';
img.alt = 'google logo';
DivElement div = content.query('div');
div.text = 'I use Google several times a day. Who doesn't?';
--------------------------------------------------------------------------------

And finally, clone the <template> content and insert it into the DOM:

--------------------------------------------------------------------------------
document.body.append(content.clone(true));
--------------------------------------------------------------------------------

The <template> element is new and not supported by every modern browser. For
an excellent introduction to the <template> element, and the pros and cons of
cloning and using template elements, see
[HTML's New Template Tag](http://www.html5rocks.com/en/tutorials/webcomponents/template/)

Here is the HTML file for this example:

--------------------------------------------------------------------------------
// cloning_a_template.html

<!DOCTYPE html>

<html>
  <body>   
    <template id='myTemplate'>
      <img src='' alt='' width='150px'>
      <div class='caption'></div>
    </template>
    
    <div><a href='#'>Clone template content</a></div>
    
    <script type='application/dart' src='cloning_a_template.dart'></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------

The <template> contents do not render when the page loads. The template loads
when the user clicks the link provided.  Here is the Dart code that makes that
happen:

--------------------------------------------------------------------------------
// cloning_a_template.dart

import 'dart:html';

void main() {
  query('a').onClick.listen((event) {
    var content = query('#myTemplate').content;
    
    ImageElement img = content.query('img');
    img.src = 'https://www.google.com/images/srpr/logo4w.png';
    img.alt = 'google logo';
    DivElement div = content.query('div');
    div.text = 'I use Google several times a day';
    document.body.append(content.clone(true));
  });
} 
--------------------------------------------------------------------------------

Once the template is activated, and a clone inserted into the DOM, the element
content becomes visible to the user.

