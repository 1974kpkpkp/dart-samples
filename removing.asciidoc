=== Removing an element from the DOM

====  Problem

You want to remove an element from the DOM.

==== Solution

Call the `remove()` method on the element. Doing so removes it from the DOM.

==== Example

The following example shows a list of exotic fruits, some of which are out of
stock.  The application allows the user to click a link to stop displaying the out
of stock items. Clicking the link triggers a callback that removes the items from
the DOM. Here is the HTML file:

--------------------------------------------------------------------------------
<!DOCTYPE html>
<head>
  <style> .out-of-stock {color: #aaa}; </style>  
</head>
<html>
  <body>
    <ul>
      <li>Rambutan</li>
      <li>Jackfruit</li>
      <li class='out-of-stock'>Passion Fruit</li> 
      <li>Lychee</li>
      <li class='out-of-stock'>Kumquat</li>           
    </ul>
  
    <p><a href='#'>Show only in-stock</a></p>
   
    <script type="application/dart" src='main.dart'></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------

And here is the Dart code that handles the element removal:

--------------------------------------------------------------------------------
import 'dart:html';
      
void main() {
  
  query('a').onClick.listen((event) {
  
    // Find all out of stock items and remove them from the DOM.
    queryAll('.out-of-stock').forEach((item) {
      item.remove();
    });
    
    event.preventDefault();
    
    // Remove the link from the DOM.
    event.target.remove();
  });
}
--------------------------------------------------------------------------------

==== Discussion

Using `remove()` works well if you have a reference to the DOM element you
want to remove. But sometimes, you have a reference to the element's
parent, not to the element itself. For example, you may want to remove an <li>, 
but you only have a reference to the <ul> or <ol> that contains the <li>. 

In such cases, get a list of the parent element's children. Removing elements
from this list removes them from the DOM.

Use `removeAt()` to remove a child by its index position:

--------------------------------------------------------------------------------
element.children.removeAt(1); // Removes the second child.
--------------------------------------------------------------------------------

Remove the last child using `removeLast()`: 

--------------------------------------------------------------------------------
element.children.removeLast();
--------------------------------------------------------------------------------

You can query the collection of children and remove a matching child using
`remove()`. The code below finds the first child with the class `largest`,
and removes it from the DOM:

--------------------------------------------------------------------------------
element.children.remove(element.query('.largest'));
--------------------------------------------------------------------------------

You can remove all of an element's children using the `clear()` method:

--------------------------------------------------------------------------------
element.children.clear();
--------------------------------------------------------------------------------


