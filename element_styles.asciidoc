=== Getting and setting element style properties

=== Problem

You want to get and set an element's CSS style properties.

==== Solution

To get an element's style properties, use the `getComputedStyle()` method.

To get or set the classes associated with an element, use the `classes`
attribute.

To assign style properties directly to an element, use the `style` field.

==== Examples
 
The examples below assume the following HTML:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <head>
    <title>manipulating_styles</title>
    <link rel='stylesheet' type='text/css' href='main.css'>
  </head>
  <body>
    <div class='bold'>Dart Cookbook</div>
    
    <script type='application/dart' src='main.dart'></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>
--------------------------------------------------------------------------------

Here are the associated style declarations:

--------------------------------------------------------------------------------
// main.css

body {font-family: sans-serif;}
div:after {content: ' rocks!';}
.bold {font-weight: bold;}
.underlined {text-decoration: underline;}
--------------------------------------------------------------------------------

===== Getting CSS styles applied to an element

Use the `getComputedStyle()` method to get a collection of all CSS styles
applied to an element. This includes inherited styles:

--------------------------------------------------------------------------------
// main.dart

import 'dart:html';

void main() {
  DivElement element = query('div');

  print(element.getComputedStyle().fontFamily); // 'sans-serif'

  // Inherited style.
  print(element.getComputedStyle().fontWeight); // 'bold'
}
--------------------------------------------------------------------------------

The `getComputedStyle()` method gets the style information for pseudo-elements.
Just pass in the pseudo-element as an argument:

--------------------------------------------------------------------------------
print(element.getComputedStyle(':after').content); // "' rocks!'"
--------------------------------------------------------------------------------

===== Accessing the classes associated with an element

Use the `classes` field to get a set of an element's CSS classes:

--------------------------------------------------------------------------------
print(element.classes.first); // 'bold'
--------------------------------------------------------------------------------

You can associate a new class with an element. Doing this applies the class
styles to the element:

--------------------------------------------------------------------------------
element.classes.add('underlined');
print(element.classes.contains('underlined'));    // true
print(element.getComputedStyle().textDecoration); // 'underline'
--------------------------------------------------------------------------------

You can remove a class associated with an element. Doing this removes the
class styles from the element:

--------------------------------------------------------------------------------
element.classes.remove('underlined');
print(element.getComputedStyle().textDecoration); // 'none'
--------------------------------------------------------------------------------

You can use the class list's `toggle()` method to toggle a class:

--------------------------------------------------------------------------------
element.classes.toggle('underlined');
print(element.classes.contains('underlined')); // true

element.classes.toggle('underlined');
print(element.classes.contains('underlined')); // false
--------------------------------------------------------------------------------

===== Directly applying a style property

While using classes is a common way of associating an element with a set of
styles, you can also attach a style property directly to the element:

--------------------------------------------------------------------------------
element.style.color = 'rgb(120, 120, 120)';
element.style.border = '1px solid rgb(0, 0, 0)';
--------------------------------------------------------------------------------

It is idiomatic Dart to write the above code using the cascade operator (..):

--------------------------------------------------------------------------------
element.style
  ..color =  'rgb(120, 120, 120)';
  ..border = '1px solid rgb(0, 0, 0)';
--------------------------------------------------------------------------------


