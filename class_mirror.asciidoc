=== Obtaining a class mirror

==== Problem

You want to do runtime introspection on a class, but don't know how to obtain
a mirror on that class.

==== Solution

To get a class mirror, you need an instance of the class, or the name of the
library where the class is defined.

If you have an instance, you can use the top level `reflectClass()` function
defined in the `dart:mirrors` library. This function returns a ClassMirror
object:

--------------------------------------------------------------------------------
var classMirror = reflectClass(myObj.runtimeType);
MirrorSystem.getName(classMirror.simpleName); // 'MyClass'
--------------------------------------------------------------------------------

If you have an InstanceMirror, use the InstanceMirror's `type` property to get
the ClassMirror:

--------------------------------------------------------------------------------
var myObj = new MyClass();
var instanceMirror = reflect(myObj);
var classMirror = instanceMirror.type;
MirrorSystem.getName(classMirror.simpleName); // 'MyClass'
--------------------------------------------------------------------------------

If you know the name of the library where the class is defined, you can obtain
a mirror on that library, and then use the library mirror's `classes` property
to obtain a ClassMirror.  A LibraryMirror's `classes` property returns a map,
where the map keys are the class names (expressed as Symbols), and the map
values are the associated ClassMirror objects.

Here is how you can get a ClassMirror on the StringBuffer class defined in the
'dart:core' library:

--------------------------------------------------------------------------------
var mirrorSystem = currentMirrorSystem();
var libraryMirror = mirrorSystem.findLibrary(const Symbol('dart.core')).first;
var classMirror = libraryMirror.classes[const Symbol('StringBuffer')];
MirrorSystem.getName(classMirror.simpleName); // 'StringBuffer'
--------------------------------------------------------------------------------




